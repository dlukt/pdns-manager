// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/dlukt/pdns-manager/ent/schema"
	"github.com/dlukt/pdns-manager/ent/settings"
	"github.com/dlukt/pdns-manager/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	settingsFields := schema.Settings{}.Fields()
	_ = settingsFields
	// settingsDescCreateTime is the schema descriptor for create_time field.
	settingsDescCreateTime := settingsFields[0].Descriptor()
	// settings.DefaultCreateTime holds the default value on creation for the create_time field.
	settings.DefaultCreateTime = settingsDescCreateTime.Default.(func() time.Time)
	// settingsDescUpdateTime is the schema descriptor for update_time field.
	settingsDescUpdateTime := settingsFields[1].Descriptor()
	// settings.DefaultUpdateTime holds the default value on creation for the update_time field.
	settings.DefaultUpdateTime = settingsDescUpdateTime.Default.(func() time.Time)
	// settings.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	settings.UpdateDefaultUpdateTime = settingsDescUpdateTime.UpdateDefault.(func() time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userFields[1].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(func() time.Time)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userFields[2].Descriptor()
	// user.DefaultUpdateTime holds the default value on creation for the update_time field.
	user.DefaultUpdateTime = userDescUpdateTime.Default.(func() time.Time)
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() time.Time)
	// userDescEmailVerified is the schema descriptor for email_verified field.
	userDescEmailVerified := userFields[7].Descriptor()
	// user.DefaultEmailVerified holds the default value on creation for the email_verified field.
	user.DefaultEmailVerified = userDescEmailVerified.Default.(bool)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() string)
}
