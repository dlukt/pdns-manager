// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dlukt/pdns-manager/ent/predicate"
	"github.com/dlukt/pdns-manager/ent/setting"
)

// SettingUpdate is the builder for updating Setting entities.
type SettingUpdate struct {
	config
	hooks    []Hook
	mutation *SettingMutation
}

// Where appends a list predicates to the SettingUpdate builder.
func (_u *SettingUpdate) Where(ps ...predicate.Setting) *SettingUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *SettingUpdate) SetUpdateTime(v time.Time) *SettingUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (_u *SettingUpdate) ClearUpdateTime() *SettingUpdate {
	_u.mutation.ClearUpdateTime()
	return _u
}

// SetPdnsAPIURL sets the "pdns_api_url" field.
func (_u *SettingUpdate) SetPdnsAPIURL(v string) *SettingUpdate {
	_u.mutation.SetPdnsAPIURL(v)
	return _u
}

// SetNillablePdnsAPIURL sets the "pdns_api_url" field if the given value is not nil.
func (_u *SettingUpdate) SetNillablePdnsAPIURL(v *string) *SettingUpdate {
	if v != nil {
		_u.SetPdnsAPIURL(*v)
	}
	return _u
}

// ClearPdnsAPIURL clears the value of the "pdns_api_url" field.
func (_u *SettingUpdate) ClearPdnsAPIURL() *SettingUpdate {
	_u.mutation.ClearPdnsAPIURL()
	return _u
}

// SetPdnsAPIKey sets the "pdns_api_key" field.
func (_u *SettingUpdate) SetPdnsAPIKey(v string) *SettingUpdate {
	_u.mutation.SetPdnsAPIKey(v)
	return _u
}

// SetNillablePdnsAPIKey sets the "pdns_api_key" field if the given value is not nil.
func (_u *SettingUpdate) SetNillablePdnsAPIKey(v *string) *SettingUpdate {
	if v != nil {
		_u.SetPdnsAPIKey(*v)
	}
	return _u
}

// ClearPdnsAPIKey clears the value of the "pdns_api_key" field.
func (_u *SettingUpdate) ClearPdnsAPIKey() *SettingUpdate {
	_u.mutation.ClearPdnsAPIKey()
	return _u
}

// Mutation returns the SettingMutation object of the builder.
func (_u *SettingUpdate) Mutation() *SettingMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SettingUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SettingUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SettingUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SettingUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SettingUpdate) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok && !_u.mutation.UpdateTimeCleared() {
		v := setting.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

func (_u *SettingUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(setting.Table, setting.Columns, sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(setting.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.UpdateTimeCleared() {
		_spec.ClearField(setting.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.PdnsAPIURL(); ok {
		_spec.SetField(setting.FieldPdnsAPIURL, field.TypeString, value)
	}
	if _u.mutation.PdnsAPIURLCleared() {
		_spec.ClearField(setting.FieldPdnsAPIURL, field.TypeString)
	}
	if value, ok := _u.mutation.PdnsAPIKey(); ok {
		_spec.SetField(setting.FieldPdnsAPIKey, field.TypeString, value)
	}
	if _u.mutation.PdnsAPIKeyCleared() {
		_spec.ClearField(setting.FieldPdnsAPIKey, field.TypeString)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{setting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SettingUpdateOne is the builder for updating a single Setting entity.
type SettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SettingMutation
}

// SetUpdateTime sets the "update_time" field.
func (_u *SettingUpdateOne) SetUpdateTime(v time.Time) *SettingUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (_u *SettingUpdateOne) ClearUpdateTime() *SettingUpdateOne {
	_u.mutation.ClearUpdateTime()
	return _u
}

// SetPdnsAPIURL sets the "pdns_api_url" field.
func (_u *SettingUpdateOne) SetPdnsAPIURL(v string) *SettingUpdateOne {
	_u.mutation.SetPdnsAPIURL(v)
	return _u
}

// SetNillablePdnsAPIURL sets the "pdns_api_url" field if the given value is not nil.
func (_u *SettingUpdateOne) SetNillablePdnsAPIURL(v *string) *SettingUpdateOne {
	if v != nil {
		_u.SetPdnsAPIURL(*v)
	}
	return _u
}

// ClearPdnsAPIURL clears the value of the "pdns_api_url" field.
func (_u *SettingUpdateOne) ClearPdnsAPIURL() *SettingUpdateOne {
	_u.mutation.ClearPdnsAPIURL()
	return _u
}

// SetPdnsAPIKey sets the "pdns_api_key" field.
func (_u *SettingUpdateOne) SetPdnsAPIKey(v string) *SettingUpdateOne {
	_u.mutation.SetPdnsAPIKey(v)
	return _u
}

// SetNillablePdnsAPIKey sets the "pdns_api_key" field if the given value is not nil.
func (_u *SettingUpdateOne) SetNillablePdnsAPIKey(v *string) *SettingUpdateOne {
	if v != nil {
		_u.SetPdnsAPIKey(*v)
	}
	return _u
}

// ClearPdnsAPIKey clears the value of the "pdns_api_key" field.
func (_u *SettingUpdateOne) ClearPdnsAPIKey() *SettingUpdateOne {
	_u.mutation.ClearPdnsAPIKey()
	return _u
}

// Mutation returns the SettingMutation object of the builder.
func (_u *SettingUpdateOne) Mutation() *SettingMutation {
	return _u.mutation
}

// Where appends a list predicates to the SettingUpdate builder.
func (_u *SettingUpdateOne) Where(ps ...predicate.Setting) *SettingUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SettingUpdateOne) Select(field string, fields ...string) *SettingUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Setting entity.
func (_u *SettingUpdateOne) Save(ctx context.Context) (*Setting, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SettingUpdateOne) SaveX(ctx context.Context) *Setting {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SettingUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SettingUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SettingUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok && !_u.mutation.UpdateTimeCleared() {
		v := setting.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

func (_u *SettingUpdateOne) sqlSave(ctx context.Context) (_node *Setting, err error) {
	_spec := sqlgraph.NewUpdateSpec(setting.Table, setting.Columns, sqlgraph.NewFieldSpec(setting.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Setting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, setting.FieldID)
		for _, f := range fields {
			if !setting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != setting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(setting.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.UpdateTimeCleared() {
		_spec.ClearField(setting.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.PdnsAPIURL(); ok {
		_spec.SetField(setting.FieldPdnsAPIURL, field.TypeString, value)
	}
	if _u.mutation.PdnsAPIURLCleared() {
		_spec.ClearField(setting.FieldPdnsAPIURL, field.TypeString)
	}
	if value, ok := _u.mutation.PdnsAPIKey(); ok {
		_spec.SetField(setting.FieldPdnsAPIKey, field.TypeString, value)
	}
	if _u.mutation.PdnsAPIKeyCleared() {
		_spec.ClearField(setting.FieldPdnsAPIKey, field.TypeString)
	}
	_node = &Setting{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{setting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
