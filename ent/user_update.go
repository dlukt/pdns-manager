// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dlukt/pdns-manager/ent/predicate"
	"github.com/dlukt/pdns-manager/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *UserUpdate) SetUpdateTime(v time.Time) *UserUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (_u *UserUpdate) ClearUpdateTime() *UserUpdate {
	_u.mutation.ClearUpdateTime()
	return _u
}

// SetFirstName sets the "first_name" field.
func (_u *UserUpdate) SetFirstName(v string) *UserUpdate {
	_u.mutation.SetFirstName(v)
	return _u
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableFirstName(v *string) *UserUpdate {
	if v != nil {
		_u.SetFirstName(*v)
	}
	return _u
}

// ClearFirstName clears the value of the "first_name" field.
func (_u *UserUpdate) ClearFirstName() *UserUpdate {
	_u.mutation.ClearFirstName()
	return _u
}

// SetLastName sets the "last_name" field.
func (_u *UserUpdate) SetLastName(v string) *UserUpdate {
	_u.mutation.SetLastName(v)
	return _u
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLastName(v *string) *UserUpdate {
	if v != nil {
		_u.SetLastName(*v)
	}
	return _u
}

// ClearLastName clears the value of the "last_name" field.
func (_u *UserUpdate) ClearLastName() *UserUpdate {
	_u.mutation.ClearLastName()
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdate) SetEmail(v string) *UserUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEmail(v *string) *UserUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetPasswordHash sets the "password_hash" field.
func (_u *UserUpdate) SetPasswordHash(v []byte) *UserUpdate {
	_u.mutation.SetPasswordHash(v)
	return _u
}

// SetEmailVerified sets the "email_verified" field.
func (_u *UserUpdate) SetEmailVerified(v bool) *UserUpdate {
	_u.mutation.SetEmailVerified(v)
	return _u
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEmailVerified(v *bool) *UserUpdate {
	if v != nil {
		_u.SetEmailVerified(*v)
	}
	return _u
}

// SetVerificationToken sets the "verification_token" field.
func (_u *UserUpdate) SetVerificationToken(v string) *UserUpdate {
	_u.mutation.SetVerificationToken(v)
	return _u
}

// SetNillableVerificationToken sets the "verification_token" field if the given value is not nil.
func (_u *UserUpdate) SetNillableVerificationToken(v *string) *UserUpdate {
	if v != nil {
		_u.SetVerificationToken(*v)
	}
	return _u
}

// ClearVerificationToken clears the value of the "verification_token" field.
func (_u *UserUpdate) ClearVerificationToken() *UserUpdate {
	_u.mutation.ClearVerificationToken()
	return _u
}

// SetResetToken sets the "reset_token" field.
func (_u *UserUpdate) SetResetToken(v string) *UserUpdate {
	_u.mutation.SetResetToken(v)
	return _u
}

// SetNillableResetToken sets the "reset_token" field if the given value is not nil.
func (_u *UserUpdate) SetNillableResetToken(v *string) *UserUpdate {
	if v != nil {
		_u.SetResetToken(*v)
	}
	return _u
}

// ClearResetToken clears the value of the "reset_token" field.
func (_u *UserUpdate) ClearResetToken() *UserUpdate {
	_u.mutation.ClearResetToken()
	return _u
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdate) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok && !_u.mutation.UpdateTimeCleared() {
		v := user.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.UpdateTimeCleared() {
		_spec.ClearField(user.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if _u.mutation.FirstNameCleared() {
		_spec.ClearField(user.FieldFirstName, field.TypeString)
	}
	if value, ok := _u.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if _u.mutation.LastNameCleared() {
		_spec.ClearField(user.FieldLastName, field.TypeString)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeBool, value)
	}
	if value, ok := _u.mutation.VerificationToken(); ok {
		_spec.SetField(user.FieldVerificationToken, field.TypeString, value)
	}
	if _u.mutation.VerificationTokenCleared() {
		_spec.ClearField(user.FieldVerificationToken, field.TypeString)
	}
	if value, ok := _u.mutation.ResetToken(); ok {
		_spec.SetField(user.FieldResetToken, field.TypeString, value)
	}
	if _u.mutation.ResetTokenCleared() {
		_spec.ClearField(user.FieldResetToken, field.TypeString)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdateTime sets the "update_time" field.
func (_u *UserUpdateOne) SetUpdateTime(v time.Time) *UserUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// ClearUpdateTime clears the value of the "update_time" field.
func (_u *UserUpdateOne) ClearUpdateTime() *UserUpdateOne {
	_u.mutation.ClearUpdateTime()
	return _u
}

// SetFirstName sets the "first_name" field.
func (_u *UserUpdateOne) SetFirstName(v string) *UserUpdateOne {
	_u.mutation.SetFirstName(v)
	return _u
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableFirstName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetFirstName(*v)
	}
	return _u
}

// ClearFirstName clears the value of the "first_name" field.
func (_u *UserUpdateOne) ClearFirstName() *UserUpdateOne {
	_u.mutation.ClearFirstName()
	return _u
}

// SetLastName sets the "last_name" field.
func (_u *UserUpdateOne) SetLastName(v string) *UserUpdateOne {
	_u.mutation.SetLastName(v)
	return _u
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLastName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetLastName(*v)
	}
	return _u
}

// ClearLastName clears the value of the "last_name" field.
func (_u *UserUpdateOne) ClearLastName() *UserUpdateOne {
	_u.mutation.ClearLastName()
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdateOne) SetEmail(v string) *UserUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEmail(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetPasswordHash sets the "password_hash" field.
func (_u *UserUpdateOne) SetPasswordHash(v []byte) *UserUpdateOne {
	_u.mutation.SetPasswordHash(v)
	return _u
}

// SetEmailVerified sets the "email_verified" field.
func (_u *UserUpdateOne) SetEmailVerified(v bool) *UserUpdateOne {
	_u.mutation.SetEmailVerified(v)
	return _u
}

// SetNillableEmailVerified sets the "email_verified" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEmailVerified(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetEmailVerified(*v)
	}
	return _u
}

// SetVerificationToken sets the "verification_token" field.
func (_u *UserUpdateOne) SetVerificationToken(v string) *UserUpdateOne {
	_u.mutation.SetVerificationToken(v)
	return _u
}

// SetNillableVerificationToken sets the "verification_token" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableVerificationToken(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetVerificationToken(*v)
	}
	return _u
}

// ClearVerificationToken clears the value of the "verification_token" field.
func (_u *UserUpdateOne) ClearVerificationToken() *UserUpdateOne {
	_u.mutation.ClearVerificationToken()
	return _u
}

// SetResetToken sets the "reset_token" field.
func (_u *UserUpdateOne) SetResetToken(v string) *UserUpdateOne {
	_u.mutation.SetResetToken(v)
	return _u
}

// SetNillableResetToken sets the "reset_token" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableResetToken(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetResetToken(*v)
	}
	return _u
}

// ClearResetToken clears the value of the "reset_token" field.
func (_u *UserUpdateOne) ClearResetToken() *UserUpdateOne {
	_u.mutation.ClearResetToken()
	return _u
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdateTime(); !ok && !_u.mutation.UpdateTimeCleared() {
		v := user.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(user.FieldUpdateTime, field.TypeTime, value)
	}
	if _u.mutation.UpdateTimeCleared() {
		_spec.ClearField(user.FieldUpdateTime, field.TypeTime)
	}
	if value, ok := _u.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if _u.mutation.FirstNameCleared() {
		_spec.ClearField(user.FieldFirstName, field.TypeString)
	}
	if value, ok := _u.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if _u.mutation.LastNameCleared() {
		_spec.ClearField(user.FieldLastName, field.TypeString)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.PasswordHash(); ok {
		_spec.SetField(user.FieldPasswordHash, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.EmailVerified(); ok {
		_spec.SetField(user.FieldEmailVerified, field.TypeBool, value)
	}
	if value, ok := _u.mutation.VerificationToken(); ok {
		_spec.SetField(user.FieldVerificationToken, field.TypeString, value)
	}
	if _u.mutation.VerificationTokenCleared() {
		_spec.ClearField(user.FieldVerificationToken, field.TypeString)
	}
	if value, ok := _u.mutation.ResetToken(); ok {
		_spec.SetField(user.FieldResetToken, field.TypeString, value)
	}
	if _u.mutation.ResetTokenCleared() {
		_spec.ClearField(user.FieldResetToken, field.TypeString)
	}
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
