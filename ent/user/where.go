// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"github.com/dlukt/pdns-manager/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastName, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// PasswordHash applies equality check predicate on the "password_hash" field. It's identical to PasswordHashEQ.
func PasswordHash(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordHash, v))
}

// EmailVerified applies equality check predicate on the "email_verified" field. It's identical to EmailVerifiedEQ.
func EmailVerified(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmailVerified, v))
}

// VerificationToken applies equality check predicate on the "verification_token" field. It's identical to VerificationTokenEQ.
func VerificationToken(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldVerificationToken, v))
}

// ResetToken applies equality check predicate on the "reset_token" field. It's identical to ResetTokenEQ.
func ResetToken(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldResetToken, v))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldLastName, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// PasswordHashEQ applies the EQ predicate on the "password_hash" field.
func PasswordHashEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPasswordHash, v))
}

// PasswordHashNEQ applies the NEQ predicate on the "password_hash" field.
func PasswordHashNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPasswordHash, v))
}

// PasswordHashIn applies the In predicate on the "password_hash" field.
func PasswordHashIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPasswordHash, vs...))
}

// PasswordHashNotIn applies the NotIn predicate on the "password_hash" field.
func PasswordHashNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPasswordHash, vs...))
}

// PasswordHashGT applies the GT predicate on the "password_hash" field.
func PasswordHashGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPasswordHash, v))
}

// PasswordHashGTE applies the GTE predicate on the "password_hash" field.
func PasswordHashGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPasswordHash, v))
}

// PasswordHashLT applies the LT predicate on the "password_hash" field.
func PasswordHashLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPasswordHash, v))
}

// PasswordHashLTE applies the LTE predicate on the "password_hash" field.
func PasswordHashLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPasswordHash, v))
}

// PasswordHashContains applies the Contains predicate on the "password_hash" field.
func PasswordHashContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPasswordHash, v))
}

// PasswordHashHasPrefix applies the HasPrefix predicate on the "password_hash" field.
func PasswordHashHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPasswordHash, v))
}

// PasswordHashHasSuffix applies the HasSuffix predicate on the "password_hash" field.
func PasswordHashHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPasswordHash, v))
}

// PasswordHashEqualFold applies the EqualFold predicate on the "password_hash" field.
func PasswordHashEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPasswordHash, v))
}

// PasswordHashContainsFold applies the ContainsFold predicate on the "password_hash" field.
func PasswordHashContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPasswordHash, v))
}

// EmailVerifiedEQ applies the EQ predicate on the "email_verified" field.
func EmailVerifiedEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmailVerified, v))
}

// EmailVerifiedNEQ applies the NEQ predicate on the "email_verified" field.
func EmailVerifiedNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmailVerified, v))
}

// VerificationTokenEQ applies the EQ predicate on the "verification_token" field.
func VerificationTokenEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldVerificationToken, v))
}

// VerificationTokenNEQ applies the NEQ predicate on the "verification_token" field.
func VerificationTokenNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldVerificationToken, v))
}

// VerificationTokenIn applies the In predicate on the "verification_token" field.
func VerificationTokenIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldVerificationToken, vs...))
}

// VerificationTokenNotIn applies the NotIn predicate on the "verification_token" field.
func VerificationTokenNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldVerificationToken, vs...))
}

// VerificationTokenGT applies the GT predicate on the "verification_token" field.
func VerificationTokenGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldVerificationToken, v))
}

// VerificationTokenGTE applies the GTE predicate on the "verification_token" field.
func VerificationTokenGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldVerificationToken, v))
}

// VerificationTokenLT applies the LT predicate on the "verification_token" field.
func VerificationTokenLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldVerificationToken, v))
}

// VerificationTokenLTE applies the LTE predicate on the "verification_token" field.
func VerificationTokenLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldVerificationToken, v))
}

// VerificationTokenContains applies the Contains predicate on the "verification_token" field.
func VerificationTokenContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldVerificationToken, v))
}

// VerificationTokenHasPrefix applies the HasPrefix predicate on the "verification_token" field.
func VerificationTokenHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldVerificationToken, v))
}

// VerificationTokenHasSuffix applies the HasSuffix predicate on the "verification_token" field.
func VerificationTokenHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldVerificationToken, v))
}

// VerificationTokenIsNil applies the IsNil predicate on the "verification_token" field.
func VerificationTokenIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldVerificationToken))
}

// VerificationTokenNotNil applies the NotNil predicate on the "verification_token" field.
func VerificationTokenNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldVerificationToken))
}

// VerificationTokenEqualFold applies the EqualFold predicate on the "verification_token" field.
func VerificationTokenEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldVerificationToken, v))
}

// VerificationTokenContainsFold applies the ContainsFold predicate on the "verification_token" field.
func VerificationTokenContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldVerificationToken, v))
}

// ResetTokenEQ applies the EQ predicate on the "reset_token" field.
func ResetTokenEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldResetToken, v))
}

// ResetTokenNEQ applies the NEQ predicate on the "reset_token" field.
func ResetTokenNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldResetToken, v))
}

// ResetTokenIn applies the In predicate on the "reset_token" field.
func ResetTokenIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldResetToken, vs...))
}

// ResetTokenNotIn applies the NotIn predicate on the "reset_token" field.
func ResetTokenNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldResetToken, vs...))
}

// ResetTokenGT applies the GT predicate on the "reset_token" field.
func ResetTokenGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldResetToken, v))
}

// ResetTokenGTE applies the GTE predicate on the "reset_token" field.
func ResetTokenGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldResetToken, v))
}

// ResetTokenLT applies the LT predicate on the "reset_token" field.
func ResetTokenLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldResetToken, v))
}

// ResetTokenLTE applies the LTE predicate on the "reset_token" field.
func ResetTokenLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldResetToken, v))
}

// ResetTokenContains applies the Contains predicate on the "reset_token" field.
func ResetTokenContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldResetToken, v))
}

// ResetTokenHasPrefix applies the HasPrefix predicate on the "reset_token" field.
func ResetTokenHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldResetToken, v))
}

// ResetTokenHasSuffix applies the HasSuffix predicate on the "reset_token" field.
func ResetTokenHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldResetToken, v))
}

// ResetTokenIsNil applies the IsNil predicate on the "reset_token" field.
func ResetTokenIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldResetToken))
}

// ResetTokenNotNil applies the NotNil predicate on the "reset_token" field.
func ResetTokenNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldResetToken))
}

// ResetTokenEqualFold applies the EqualFold predicate on the "reset_token" field.
func ResetTokenEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldResetToken, v))
}

// ResetTokenContainsFold applies the ContainsFold predicate on the "reset_token" field.
func ResetTokenContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldResetToken, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
