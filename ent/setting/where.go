// Code generated by ent, DO NOT EDIT.

package setting

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/dlukt/pdns-manager/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldUpdateTime, v))
}

// PdnsAPIURL applies equality check predicate on the "pdns_api_url" field. It's identical to PdnsAPIURLEQ.
func PdnsAPIURL(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldPdnsAPIURL, v))
}

// PdnsAPIKey applies equality check predicate on the "pdns_api_key" field. It's identical to PdnsAPIKeyEQ.
func PdnsAPIKey(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldPdnsAPIKey, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldUpdateTime, v))
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.Setting {
	return predicate.Setting(sql.FieldIsNull(FieldUpdateTime))
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.Setting {
	return predicate.Setting(sql.FieldNotNull(FieldUpdateTime))
}

// PdnsAPIURLEQ applies the EQ predicate on the "pdns_api_url" field.
func PdnsAPIURLEQ(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldPdnsAPIURL, v))
}

// PdnsAPIURLNEQ applies the NEQ predicate on the "pdns_api_url" field.
func PdnsAPIURLNEQ(v string) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldPdnsAPIURL, v))
}

// PdnsAPIURLIn applies the In predicate on the "pdns_api_url" field.
func PdnsAPIURLIn(vs ...string) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldPdnsAPIURL, vs...))
}

// PdnsAPIURLNotIn applies the NotIn predicate on the "pdns_api_url" field.
func PdnsAPIURLNotIn(vs ...string) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldPdnsAPIURL, vs...))
}

// PdnsAPIURLGT applies the GT predicate on the "pdns_api_url" field.
func PdnsAPIURLGT(v string) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldPdnsAPIURL, v))
}

// PdnsAPIURLGTE applies the GTE predicate on the "pdns_api_url" field.
func PdnsAPIURLGTE(v string) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldPdnsAPIURL, v))
}

// PdnsAPIURLLT applies the LT predicate on the "pdns_api_url" field.
func PdnsAPIURLLT(v string) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldPdnsAPIURL, v))
}

// PdnsAPIURLLTE applies the LTE predicate on the "pdns_api_url" field.
func PdnsAPIURLLTE(v string) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldPdnsAPIURL, v))
}

// PdnsAPIURLContains applies the Contains predicate on the "pdns_api_url" field.
func PdnsAPIURLContains(v string) predicate.Setting {
	return predicate.Setting(sql.FieldContains(FieldPdnsAPIURL, v))
}

// PdnsAPIURLHasPrefix applies the HasPrefix predicate on the "pdns_api_url" field.
func PdnsAPIURLHasPrefix(v string) predicate.Setting {
	return predicate.Setting(sql.FieldHasPrefix(FieldPdnsAPIURL, v))
}

// PdnsAPIURLHasSuffix applies the HasSuffix predicate on the "pdns_api_url" field.
func PdnsAPIURLHasSuffix(v string) predicate.Setting {
	return predicate.Setting(sql.FieldHasSuffix(FieldPdnsAPIURL, v))
}

// PdnsAPIURLIsNil applies the IsNil predicate on the "pdns_api_url" field.
func PdnsAPIURLIsNil() predicate.Setting {
	return predicate.Setting(sql.FieldIsNull(FieldPdnsAPIURL))
}

// PdnsAPIURLNotNil applies the NotNil predicate on the "pdns_api_url" field.
func PdnsAPIURLNotNil() predicate.Setting {
	return predicate.Setting(sql.FieldNotNull(FieldPdnsAPIURL))
}

// PdnsAPIURLEqualFold applies the EqualFold predicate on the "pdns_api_url" field.
func PdnsAPIURLEqualFold(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEqualFold(FieldPdnsAPIURL, v))
}

// PdnsAPIURLContainsFold applies the ContainsFold predicate on the "pdns_api_url" field.
func PdnsAPIURLContainsFold(v string) predicate.Setting {
	return predicate.Setting(sql.FieldContainsFold(FieldPdnsAPIURL, v))
}

// PdnsAPIKeyEQ applies the EQ predicate on the "pdns_api_key" field.
func PdnsAPIKeyEQ(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEQ(FieldPdnsAPIKey, v))
}

// PdnsAPIKeyNEQ applies the NEQ predicate on the "pdns_api_key" field.
func PdnsAPIKeyNEQ(v string) predicate.Setting {
	return predicate.Setting(sql.FieldNEQ(FieldPdnsAPIKey, v))
}

// PdnsAPIKeyIn applies the In predicate on the "pdns_api_key" field.
func PdnsAPIKeyIn(vs ...string) predicate.Setting {
	return predicate.Setting(sql.FieldIn(FieldPdnsAPIKey, vs...))
}

// PdnsAPIKeyNotIn applies the NotIn predicate on the "pdns_api_key" field.
func PdnsAPIKeyNotIn(vs ...string) predicate.Setting {
	return predicate.Setting(sql.FieldNotIn(FieldPdnsAPIKey, vs...))
}

// PdnsAPIKeyGT applies the GT predicate on the "pdns_api_key" field.
func PdnsAPIKeyGT(v string) predicate.Setting {
	return predicate.Setting(sql.FieldGT(FieldPdnsAPIKey, v))
}

// PdnsAPIKeyGTE applies the GTE predicate on the "pdns_api_key" field.
func PdnsAPIKeyGTE(v string) predicate.Setting {
	return predicate.Setting(sql.FieldGTE(FieldPdnsAPIKey, v))
}

// PdnsAPIKeyLT applies the LT predicate on the "pdns_api_key" field.
func PdnsAPIKeyLT(v string) predicate.Setting {
	return predicate.Setting(sql.FieldLT(FieldPdnsAPIKey, v))
}

// PdnsAPIKeyLTE applies the LTE predicate on the "pdns_api_key" field.
func PdnsAPIKeyLTE(v string) predicate.Setting {
	return predicate.Setting(sql.FieldLTE(FieldPdnsAPIKey, v))
}

// PdnsAPIKeyContains applies the Contains predicate on the "pdns_api_key" field.
func PdnsAPIKeyContains(v string) predicate.Setting {
	return predicate.Setting(sql.FieldContains(FieldPdnsAPIKey, v))
}

// PdnsAPIKeyHasPrefix applies the HasPrefix predicate on the "pdns_api_key" field.
func PdnsAPIKeyHasPrefix(v string) predicate.Setting {
	return predicate.Setting(sql.FieldHasPrefix(FieldPdnsAPIKey, v))
}

// PdnsAPIKeyHasSuffix applies the HasSuffix predicate on the "pdns_api_key" field.
func PdnsAPIKeyHasSuffix(v string) predicate.Setting {
	return predicate.Setting(sql.FieldHasSuffix(FieldPdnsAPIKey, v))
}

// PdnsAPIKeyIsNil applies the IsNil predicate on the "pdns_api_key" field.
func PdnsAPIKeyIsNil() predicate.Setting {
	return predicate.Setting(sql.FieldIsNull(FieldPdnsAPIKey))
}

// PdnsAPIKeyNotNil applies the NotNil predicate on the "pdns_api_key" field.
func PdnsAPIKeyNotNil() predicate.Setting {
	return predicate.Setting(sql.FieldNotNull(FieldPdnsAPIKey))
}

// PdnsAPIKeyEqualFold applies the EqualFold predicate on the "pdns_api_key" field.
func PdnsAPIKeyEqualFold(v string) predicate.Setting {
	return predicate.Setting(sql.FieldEqualFold(FieldPdnsAPIKey, v))
}

// PdnsAPIKeyContainsFold applies the ContainsFold predicate on the "pdns_api_key" field.
func PdnsAPIKeyContainsFold(v string) predicate.Setting {
	return predicate.Setting(sql.FieldContainsFold(FieldPdnsAPIKey, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Setting) predicate.Setting {
	return predicate.Setting(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Setting) predicate.Setting {
	return predicate.Setting(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Setting) predicate.Setting {
	return predicate.Setting(sql.NotPredicates(p))
}
